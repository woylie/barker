/**
 * This module defines all the functions, including the accessor functions for
 * the theme variables.
 *
 * While you define all variables in the theme modules and custom properties are
 * defined based on those variables, you should use the accessor functions in
 * this module to reference the value. This ensures that you don't accidentally
 * use a custom property that wasn't defined.
 */

@use "../../build/tokens/scss/tokens.scss" as t;
@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "themes/base" as b;
@use "themes/functions" as tf;

/// Returns the custom property defining the base font size.
@function base-size() {
  @return var(--base-size);
}

/// Returns the color with the given ID by referencing a custom property.
///
/// @arg {String} $id
@function color($id) {
  @if not map.has-key(theme(colors), $id) {
    @error "Invalid color #{$id}. Allowed values: #{map.keys(theme(colors))}.";
  }

  @return var(--color-#{"" + $id});
}

/// Returns the font family with the given ID by referencing a custom property.
///
/// @arg {String} $id
@function font-family($id) {
  @if not map.has-key(token(font, family), $id) {
    @error "Invalid font family #{$id}. Allowed values: #{map.keys(token(font, family))}.";
  }

  @return var(--font-family-#{"" + $id});
}

/// Returns the font size with the given ID by referencing a custom property.
///
/// @arg {String} $id
@function size($id) {
  @if not map.has-key(theme(sizes), $id) {
    @error "Invalid size #{$id}. Allowed values: #{theme($sizes)}.";
  }

  @return var(--size-#{"" + $id});
}

/// Returns the a vertical distance based on the given number of lines.
/// References a custom property.
///
/// @arg {Number} $factor
@function lines($factor) {
  @if not list.index(theme(line-heights), $factor) {
    @error "Invalid line height #{$lines}. Allowed values: #{theme(line-heights)}.";
  }

  $key: tf.number_to_fraction($factor);
  @return var(--lines-#{"" + $key});
}

/// Returns the letter spacing value with the given ID by referencing a custom
/// property.
///
/// @arg {String} $id
@function letter-spacing($id) {
  @if not map.has-key(token(letter-spacing), $id) {
    @error "Invalid letter spacing #{$id}. Allowed values: #{map.keys(token(letter-spacing))}.";
  }

  @return var(--letter-spacing-#{"" + $id});
}

/// Returns the custom property reference defining the measure (max width for
/// paragraphs).
@function measure() {
  @return var(--measure);
}

/// Returns the font weight value with the given ID by referencing a custom
/// property.
///
/// @arg {String} $id
@function weight($id) {
  @if not map.has-key(token(weight), $id) {
    @error "Invalid font weight #{$id}. Allowed values: #{map.keys(token(weight))}.";
  }

  @return var(--weight-#{"" + $id});
}

/// Returns the border radius value with the given ID by referencing a custom
/// property.
///
/// @arg {String} $id
@function radius($id) {
  @if not map.has-key(token(radius), $id) {
    @error "Invalid radius #{$id}. Allowed values: #{map.keys(token(radius))}.";
  }

  @return var(--radius-#{"" + $id});
}

/// Returns the spacer value based on the given factor. This function does _not_
/// reference a custom property.
///
/// The given factor is not validated. The `spacer-factors` property of the
/// theme is only used for defining the utility classes for paddings and
/// margins.
///
/// @arg {Number} $factor
@function spacer($factor) {
  @return $factor * theme(spacer-base);
}

/// Returns the border width value with the given ID by referencing a custom
/// property.
///
/// @arg {String} $id
@function border-width($id) {
  @if not map.has-key(token(border, width), $id) {
    @error "Invalid border-width #{$id}. Allowed values: #{map.keys(token(border, width))}.";
  }

  @return var(--border-width-#{"" + $id});
}

/// Returns the breakpoint value with the given ID.
///
/// @arg {String} $id
@function breakpoint($id) {
  @if not map.has-key(token(breakpoint), $id) {
    @error "Invalid breakpoint #{$id}. Allowed values: #{map.keys(token(breakpoint))}.";
  }

  @return map.get(token(breakpoint), $id);
}

/* Internal functions you won't need in your style modules. */

/// Returns a value from the base theme.
///
/// @arg {String} $key
@function theme($key) {
  @if not map.has-key(b.theme(), $key) {
    @error "Invalid theme property #{$key}. Allowed values: #{map.keys(b.theme())}.";
  }

  @return map.get(b.theme(), $key);
}

@function token($key, $keys...) {
  @if not map.has-key(t.$tokens, $key, $keys...) {
    @error "Invalid token #{$key}.";
  }

  @return map.get(t.$tokens, $key, $keys...);
}
