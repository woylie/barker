@use "sass:map";
@use "sass:math";

@function size-from-scale($scale, $exponent) {
  $calculated-size: math.pow($scale, $exponent);
  @return $calculated-size * 1rem;
}

@function generate-sizes($modular-scale, $smaller-sizes, $larger-sizes) {
  $sizes: ();

  @for $i from $smaller-sizes through 1 {
    $rem: size-from-scale($modular-scale, -1 * $i);

    @if $i == 1 {
      $sizes: map.set($sizes, "s", $rem);
    } @else {
      $s: "s";

      @for $i from $i through 2 {
        $s: "x#{$s}";
      }

      $sizes: map.set($sizes, $s, $rem);
    }
  }

  $sizes: map.set($sizes, "m", size-from-scale($modular-scale, 0));

  @for $i from 1 through $larger-sizes {
    $rem: size-from-scale($modular-scale, $i);

    @if $i == 1 {
      $sizes: map.set($sizes, "l", $rem);
    } @else {
      $s: "l";

      @for $i from 2 through $i {
        $s: "x#{$s}";
      }

      $sizes: map.set($sizes, $s, $rem);
    }
  }

  @return $sizes;
}

@function number-to-fraction($n) {
  $mapping: (
    0.25: 1_4,
    0.5: 1_2,
    0.75: 3_4,
    1.25: 5_4,
    1.5: 3_2,
    1.75: 7_4,
  );

  @if map.has-key($mapping, $n) {
    @return map.get($mapping, $n);
  } @else {
    @return $n;
  }
}

@function generate-lines($base-line-height, $line-heights) {
  $lines: ();

  @each $factor in $line-heights {
    $value: $base-line-height * $factor * 1rem;
    $key: number_to_fraction($factor);
    $lines: map.set($lines, $key, $value);
  }

  @return $lines;
}
